import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";

export interface PaginationState {
  init: number;
  end: number;
}

const initialState: PaginationState = {
  init: 0,
  end: 5,
};

export const tableSlice = createSlice({
  name: "pagination",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setPagination: (state, action: PayloadAction<number>) => {
      console.log(state.init, action.payload);
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.init += action.payload;
      state.end += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  //   extraReducers: (builder) => {
  //     console.log(builder);
  //     builder
  //       .addCase(incrementAsync.pending, (state) => {
  //         state.status = "loading";
  //       })
  //       .addCase(incrementAsync.fulfilled, (state, action) => {
  //         state.status = "idle";
  //         state.value += action.payload;
  //       })
  //       .addCase(incrementAsync.rejected, (state) => {
  //         state.status = "failed";
  //       });
});

export const selectPagination = (state: RootState) => state.pagination;

export const { setPagination } = tableSlice.actions;

export default tableSlice.reducer;
